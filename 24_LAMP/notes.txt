Steps
1. Make an account on 




Stuff I ran:

made account on site, added credits and put in card

in terminal:
typed: brew install doctl
then: doctl auth init --context myUsername
ok now pause and go to the control panel which is below all
the clicky things on the dashboard (like deploy a droplet, etc.), adn find API on the side 
and click it and hit general a token.
copy the token, save it somehwere.
now continue the init thingy with the token.

switch to the right user 
doctl auth list
doct auth switch

type in doctl auth list --context myUsername

Then type:
doctl compute ssh-key import TODO-KEY-NAME --public-key-file ~/.ssh/id_rsa.pub
(generate a key first if u don't have one)

Then follow the client instructions cuz they're easier and work

now ssh into 
root@ip_on_droplet
apt update
apt upgrade (y)

now install a webserver
apt install nginx (y)
systemctl status nginx (to see if it's running)

now open up new tab and paste ip in address field- it should say hello to nginx

now type cd /var/www
cd into the html folder to see the default html file

for flask:
$ sudo apt-get install python3-pip
$ sudo apt-get install python3-dev
$ sudo apt-get install python3-setuptools
$ sudo apt-get install python3-venv
$ sudo apt-get install build-essential libssl-dev libffi-dev 

apt install python-pip (also tried bc couldn't find flask?)

then continue to follow this?
https://pythonforundergradengineers.com/flask-app-on-digital-ocean.html

and the flask app now runs on a port!

and you can run it as normal? but some fancy stuff to connect it to html... see doct above

better instructions to run an app on apache:
### Add your first app on the droplet! 
1. Clone your workshop repo onto the new machine (use http unless you want to add a key to the VM)
   ```
   git clone https://github.com/<your_username>/<workshop_repo_name>.git
   ```
2. Before doing anything else, type in the following commands so that python3 works while running flask
   ```
   sudo apt-get update
   sudo apt-get upgrade
   sudo apt-get install python3-pip
   sudo apt-get install python3-dev
   sudo apt-get install python3-setuptools
   sudo apt-get install python3-venv
   sudo apt-get install build-essential libssl-dev libffi-dev
   ```
3. Find the code for the simplest version of a flask appâ€“ we recommend 14_form- and cd into that directory
  ```
  cd <workshop_repo_name>/<app_you_want>
  ```
4. Make and activate a virtual environment in that directory
  ```
  python3 -m venv <environment_name>
  source <environment_name>/bin/activate
  ```
5. Use pip install to get some basic packages 
  ```
  pip install wheel 
  pip install flask
  pip install uwsgi
  pip install requests
  ```
OR (if the directory has a requirements.txt)
  ```
  pip install -r requirements.txt
  ```
6. Make a quick change to where your app loads- open up the file that runs the app (should be app.py) and put '0.0.0.0' in the run parentheses
  ```
  nano (or vim...) app.py
  ```
  scroll to the ```if __name__ == "__main__"``` and alter ```app.run``` to 
  ```app.run(host='0.0.0.0')```
7. Enable traffic on port 5000 on the ufw firewall (default flask port)
  ```
  sudo ufw allow 5000
  ```
7. Run the app
  ```
  python3 app.py
  ```
8. Check if the app worked on port 5000 of your droplet (hopefully it does!!)
for activating venv: source p01venv/bin/activate

update!! all works but the database stuff doesn't...
